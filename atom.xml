<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[文斯雜談凸^-^凸]]></title>
  <link href="http://kamiiyu.github.io/atom.xml" rel="self"/>
  <link href="http://kamiiyu.github.io/"/>
  <updated>2016-12-02T11:32:13+08:00</updated>
  <id>http://kamiiyu.github.io/</id>
  <author>
    <name><![CDATA[文斯]]></name>
    <email><![CDATA[spicekamiiyu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[非动态，也非静态，Ruby3 Typing 的第三条路]]></title>
    <link href="http://kamiiyu.github.io/blog/2016/11/30/ruby3-typing/"/>
    <updated>2016-11-30T15:55:35+08:00</updated>
    <id>http://kamiiyu.github.io/blog/2016/11/30/ruby3-typing</id>
    <content type="html"><![CDATA[<p>Matz在2016年的Rubykaigi里做了一个关于Ruby3 Typing的分享。<br/>
首先简单介绍一下什么是<a href="https://ja.wikipedia.org/wiki/RubyKaigi">RubyKaigi</a>。<br/>
Kaigi就是日语【会議】的罗马字母写法，顾名思义也就是在日本举行的RubyConf。<br/>
RubyKaigi在2006年首次举行时的名字就是【日本Rubyカンファレンス】（Japan Ruby Conference），由于容易与<a href="http://rubycentral.org/">Ruby Central</a>混淆，因此在2007年改名为【日本Ruby会議】，直到2011年停办。<br/>
2013年大会重开，改名为【RubyKaigi】，并统一使用英语作为大会的官方名称。</p>

<p>今年的<a href="http://rubykaigi.org/2016/">RubyKaigi2016</a>在9月8号到10号京都举行。由于近水流台，有不少像Matz这样的Ruby committer参与分享，所以大会含金量非常高。<br/>
<a href="http://rubykaigi.org/2016/">官网</a>中以及发布了所有视频，希望以后有机会可以亲身去感受下。</p>

<p>大会的首个Topic是Matz的 <a href="http://rubykaigi.org/2016/presentations/yukihiro_matz.html">Ruby3 Typing</a>（<a href="https://www.youtube.com/watch?v=2Ag8l-wq5qk">油管直通车</a>）</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/02.ruby3_typing.png" alt="02.ruby3_typing" /></p>

<p>演讲者Matz就不多做介绍了。</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/01.matz.png" alt="01.matz" /></p>

<p>官方没有提供在线版的PPT，我把这个日语演讲“翻译”成以下的文字，为了保持文字通顺，稍微加工了一下。</p>

<hr />

<h2>Ruby3 Typing（Matz）</h2>

<p>在2010年以来的新语言很多都是静态类型语言（Static Typed Languages），例如TypeScript、Flow、Go、Swift等等。<br/>
与之相比，Ruby没有静态类型，又是上世纪90年代语言，所以有些人会说“Ruby is Dead”、“Rails is Dead”。</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/03.no_static_typing.png" alt="03.no_static_typing" /></p>

<p>但技术有时候就像钟摆，有时候偏向一种技术，有时候又偏向另外一种技术，这是常有的事情。例如静态类型与动态类型“之争”。</p>

<ul>
<li><p>1970s到1980s左右，从Smalltalk、lisp摆到Java、C++</p></li>
<li><p>接下来又从Java摆到Ruby、JavaScript</p></li>
<li><p>到最近又从Ruby、JavaScript摆到Swift、Go</p></li>
</ul>


<p>那么未来Swift、Go又会摆到哪里去呢？未来Ruby3的类型又会有什么改变呢？</p>

<p>首先我们需要知道什么是Ruby的type？对于动态类型语言来说，<font color='red'>Class不是类型</font>。<br/>
另外在Ruby其中一个重要的原则就是<a href="https://en.wikipedia.org/wiki/Duck_typing">Duck typing</a>，也就是说对于一个Ruby对象来说，我们不关心她继承关系（inheritance），也不关心她的内部结构（structure），我们只关心她的行为（behaves）。</p>

<p>请看下面<code>String IO</code>的例子。</p>

<p>Ruby版本的日志输出代码片段：</p>

<pre><code>log(STDERR, "error!")  
</code></pre>

<p>静态类型版本：</p>

<pre><code>log(dst IO, mesg String)
</code></pre>

<p>Ruby <code>StringIO</code>版本：</p>

<pre><code>sio = StringIO.new()
log(sio, "error!")
sio.string # =&gt; retrieve string
</code></pre>

<p>上面的<code>StringIO</code>例子在静态类型的世界行不通，因为<code>StringIO</code>没有与<code>IO</code>有共同的<code>superclass</code>或<code>interface</code>，所以无法通过编译。</p>

<p>Duck typing使我们在开发的时候不需花时间研究各个Class间的关系，大大降低开发者的开发成本，而且扩展起来也更加灵活。<br/>
所以我们可以认为，在Ruby的type就是“Duck”。“Duck”不是Java那样的<a href="https://en.wikipedia.org/wiki/Nominal_type_system">Nominal type</a>，更不是Class，它是一种被<font color='red'>期待</font>的行为。</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/04.duck_is_behavior.png" alt="04.duck_is_behavior" /></p>

<p>“期待”只是存在于我们的脑子里面，很暧昧的想法，也正因此Ruby的Type可以很灵活，对比用Class来定义Type的方式会有很多限制。</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/04.typing_by_class.png" alt="04.typing_by_class" /></p>

<p>对比Nominal typing，我（Matz）更喜欢Go的Interface，也就是<a href="https://en.wikipedia.org/wiki/Structural_type_system">Structural Subtyping</a>这种方式。</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/04.go_interface.png" alt="04.go_interface" /></p>

<p>在上面的例子中，上面三行定义一个包含<code>Write</code>方法的interface <code>LogDst</code>，下面三行的log函数接受两个参数<code>LogDst</code>和字符串<code>mesg</code>。在这个函数里我们只需要<code>LogDst</code>有<code>Write</code>的行为（方法）就可以了， 它可能是输出到standard IO、String，或者其他什么地方，我们并不需要关心它的内部逻辑。<br/>
Structural Subtyping和Duck typing同样保持很好的灵活性，当然我（Matz）还是更喜欢Ruby的Duck Typing :&ndash;)。</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/05.duck_typing_is_awesome.png" alt="05.duck_typing_is_awesome" /></p>

<p>DRY(Don&rsquo;t repeat yourself)是Ruby另外一个重要原则。</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/06.do_not_repeat_yourself.png" alt="06.do_not_repeat_yourself" /></p>

<p>为了避免不必要的重复，我们不会在程序写实际上不需要的东西，也就是说Ruby程序的运行不依赖于type annotations，因此我们就不需要它们，甚至要去除它们。</p>

<p>但是Dynamic Typing也是存在不少不足的地方。</p>

<ul>
<li>在程序运行时能发现错误<br/>
<img src="http://kamiiyu.github.io/images/2016-11-30/07.errors_only_found_in_runtime.png" alt="07.errors_only_found_in_runtime" /></li>
<li>error message不友好，信息量少，下面可能是我们最熟悉但又“莫名其妙”的错误信息<br/>
<img src="http://kamiiyu.github.io/images/2016-11-30/08.undefined_method.png" alt="08.undefined_method" /></li>
<li>如果测试覆盖不够，可能会有预想不到的typing error</li>
<li>缺少文档，像Ruby这样没有类型的语言写程序的时候非常爽，但读程序的时候就可能有困难了，所以有些人会写下面这样的注释<br/>
<img src="http://kamiiyu.github.io/images/2016-11-30/09.document.png" alt="09.document" /></li>
</ul>


<p>可能会有人吐槽，最终不还是要把类型写出来吗。。。<br/>
但。。。无论如何还是不想指定类型，绝对不想。。。（Matz特别强调两次，全场都笑了）</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/10.do_not_want_to_specify_types.png" alt="10.do_not_want_to_specify_types" /></p>

<p>因为这样会降低程序的灵活性，但为了以后的维护，我们又希望有可读性好的文档。<br/>
除了把类型信息像刚才那样写在注释外，还有另外一个做法是把他写在文档中。把类型写在文档里，但实际程序又不会做类型检查，到头来实际两边都没有讨好。<br/>
至少对Ruby来说Type Annotation，Mixed/Gradual都不是好主意。</p>

<p>正是因为还有以上种种问题，Ruby还有很多改进的空间，</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/11.room_for_improvement.png" alt="11.room_for_improvement" /></p>

<p>并且我们作为一个工程师应该要主动去解决这些问题。</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/12.solve_problems.png" alt="12.solve_problems" /></p>

<p>有些人提出了Static Typing with <a href="https://en.wikipedia.org/wiki/Type_inference">Type Inference</a>的解决方案，但这个方案还是没能解决静态类型不够灵活的缺点。<br/>
又有人提出Gradual Typing 或者 Optinal Typing的解决方案，但这两种类型实际还是静态类型，因此灵活性这个问题还是没能得到解决。<br/>
Ruby需要除上面以外其他的什么东西，一种像Static Typing这样进行类型检查，但又像Duck Typing这样灵活的类型。</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/13.static_type_with_duck_typing.png" alt="13.static_type_with_duck_typing" /></p>

<p>暂且就把她叫做Soft typing。</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/14.soft_typing.png" alt="14.soft_typing" /></p>

<p>Soft typing是一套用行为来定义的Type System。</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/15.soft_typing_system.png" alt="15.soft_typing_system" /></p>

<p>所谓行为就是一组的方法和参数数量、类型等。</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/16.behavior_is_a_set_of_method.png" alt="16.behavior_is_a_set_of_method" /></p>

<p>回到刚才日志输出的例子，Go版本的interface其实可以让程序自动生成，并且我们写程序的时候也不需要关心
interface(Type)的名字(取名字对有些人来说是件麻烦事)，</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/17.not_to_worry_about_type_names.png" alt="17.not_to_worry_about_type_names" /></p>

<p>因此我们只可以忽略这些细节，专注于程序开发。（Happy Programming的真谛）</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/18.vague_ideas.png" alt="18.vague_ideas" /></p>

<p>例如，我们可以把Type信息搜集起来，就像放到数据库中一样。然后，我看可以从这个数据库中获取Type的定义和Type行为（方法）。<br/>
我们也这些Type信息看做是一种表达式（expression），</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/19.retrieve_a_type_as_a_expression.png" alt="19.retrieve_a_type_as_a_expression" /></p>

<p>例如，我们可以检查当把A表达式赋值给B表达式时是否兼容。</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/20.check_compatiblity.png" alt="20.check_compatiblity" /></p>

<p>我们也可以检查某个类型有没有对应的方法。</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/21.check_method.png" alt="21.check_method" /></p>

<p>这样的做法也许并不能做到100%的类型检查，但还是比之前一点都没用要好。</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/22.better_than_nothing.png" alt="22.better_than_nothing" /></p>

<p>如果找不到对应的类型信息，由于本来就是dynamic typing，那么我们就退回到dynamic typing就可以了。</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/23.fallback.png" alt="23.fallback" /></p>

<p>有两种方式实现Soft typing。</p>

<p>一个是利用ad-hoc type的信息。<br/>
例如，有a表达式（也有可能是变量），我们期望她有gsub，slice，map三个方法，如果找不到有对应的class满足这个条件的，那就抛出错误信息。</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/24.ad_doc_example.png" alt="24.ad_doc_example" /></p>

<p>但对于在运行时不断动态添加或修改的方法，这种检查方式就无能为力了。</p>

<p>另外一个是在运行时搜集类型信息，</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/25.collect_from_runtime.png" alt="25.collect_from_runtime" /></p>

<p>特别是在测试的时候，</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/26.collect_from_test.png" alt="26.collect_from_test" /></p>

<p>一般Libray或者Gem都会进行测试，那么我们可以在测试的同时，建立类型数据库。<br/>
这样我们就可以在发布Gem的同时，以某种方式一起创建和发布与之对应的类型数据库。</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/27.build_type_database_from_gem.png" alt="27.build_type_database_from_gem" /></p>

<p>IDE也可以利用这些Type Database的信息，让我们可以构造更加有效率、聪明的开发环境。<br/>
可惜的是在先阶段以上这些暂时都还只是构想，我们还不能用到。</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/28.still_mere_concept.png" alt="28.still_mere_concept" /></p>

<p>所以让我们一起期待Ruby3吧！</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/29.part_of_ruby3.png" alt="29.part_of_ruby3" /></p>

<p>最后，我们（Ruby committees）有一个很重要的信息传递给大家，我们是非常重视开发者的。</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/30.we_care_about_you.png" alt="30.we_care_about_you" /></p>

<p>我们不会对Dynamic typing的“缺点“视而不见，或者叫开发者多做测试就了事，而是希望努力的改善Ruby，让开发者有更好的开发体验。</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/31.willing_improve_development_experience.png" alt="31.willing_improve_development_experience" /></p>

<p>关于Ruby3什么时候发布，目前还是不知道。。。</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/32.i_dont_know.png" alt="32.i_dont_know" /></p>

<p>从committee management的角度来看，开源软件一般没有所谓的dead line，也没有很明确的road map，至少对于Ruby这个项目来说没有。但如果什么都没有又很难开展工作，因此我们对Ruby3的开发指定了3个目标。</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/33_three_goals_of_ruby3.png" alt="33_three_goals_of_ruby3" /></p>

<p>就像当年美国登月一样，也是先定了一个困难、远大的目标，然后大家一起为之努力，最后成功。<br/>
那Ruby3的三个目标什么时候才能实现呢？我（Matz）希望在下一次的日本奥运会的时候。。。</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/34.wait_for_years.png" alt="34.wait_for_years" /></p>

<p>虽然Ruby3还”遥遥无期“，但Ruby前进的脚步是不会停止的。</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/35.keep_moving_forward.png" alt="35.keep_moving_forward" /></p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/36.i_promise.png" alt="36.i_promise" /></p>

<p>我们会一直不遗余力的帮助广大开发者在编程中找到乐趣&mdash;Happy Hacking！</p>

<p><img src="http://kamiiyu.github.io/images/2016-11-30/37.happy_hacking.png" alt="37.happy_hacking" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OPEN SUSE下的RVM小坑]]></title>
    <link href="http://kamiiyu.github.io/blog/2013/12/16/rvm-on-open-suse/"/>
    <updated>2013-12-16T15:48:00+08:00</updated>
    <id>http://kamiiyu.github.io/blog/2013/12/16/rvm-on-open-suse</id>
    <content type="html"><![CDATA[<p>OPEN SUSE13.1默認就安裝了Ruby2,不過還是習慣用RVM這樣的工具管理Ruby。沒想到把系統默認的Ruby更改後，竟然給我發現了YaST的“小祕密”。<br/>
P.S.<a href="http://zh.wikipedia.org/wiki/YaST">YaST</a>做得很優秀，没Ubuntu的花哨，非常實用。<br/>
<img src="http://kamiiyu.github.io/images/2013-12-16/yast.png" alt="yast" />
用RVM安裝Ruby後，上圖的所有項目的子窗口都無法再彈出了。試着在命令行用root身份登陸運行<code>yast2 --qt</code>，這樣是運行是沒問題的。
<img src="http://kamiiyu.github.io/images/2013-12-16/command-line.png" alt="command-line" />
後來差了一下yast的日誌<code>/var/log/YaST2/y2log</code>，發現以下的錯誤：</p>

<pre><code>2013-12-16 12:59:28 &lt;3&gt; linux-en59.site(4285) [Y2Ruby] binary/YRuby.cc(callClient):238 cannot require yast:cannot load such file -- fast_gettext at /usr/lib64/ruby/2.0.0/rubygems/core_ext/kernel_
</code></pre>

<p>很明顯是Ruby的問題，<code>fast_gettext</code>非常可疑。<br/>
<code>gem search fast_gettext</code>果然發現的確有fast_gettext這個gem，果斷install。</p>

<pre><code>gem install fast_gettext
</code></pre>

<p>問題解決！
<img src="http://kamiiyu.github.io/images/2013-12-16/command-line2.png" alt="command-line2" />
原來YaST也用到Ruby！</p>

<p>關於gettext可以參考<a href="http://zh.wikipedia.org/wiki/Gettext">維基</a>，fast_gettext可參考<a href="https://github.com/grosser/fast_gettext">這裏</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReText——Linux下的MarkDown利器]]></title>
    <link href="http://kamiiyu.github.io/blog/2013/12/06/retext/"/>
    <updated>2013-12-06T14:43:00+08:00</updated>
    <id>http://kamiiyu.github.io/blog/2013/12/06/retext</id>
    <content type="html"><![CDATA[<h2>尋覓Linux下的MarkDown編輯器</h2>

<p>最近由於工作的關係，經常會使用MarkDown寫東西。用MarkDown那就一定離不了支持MarkDown的編輯器。我對MarkDown編輯器的要求只有兩點：</p>

<ul>
<li>可以自定義CSS，因爲我喜歡用黑色等暗色系的顏色作爲寫作和預覽時的底色</li>
<li>有同步的Live View功能，不是另外啓動瀏覽器預覽html</li>
</ul>


<p>在Mac和Windows下非常容易就找到了符合以上兩點要求的編輯器——Mac的<a href="http://mouapp.com/" title="Mou">Mou</a>（完全免費）和Windows下的<a href="http://markdownpad.com/" title="MarkdownPad">MarkdownPad</a>（標準版，免費）。它們都是非常優秀的編輯器，關於它們兩就不多說，是該平臺下MarkDown編輯器的不二之選。</p>

<p>由於平時工作至少50%時間還是在Linux下的，如果在Linux也能找到那麼方便的MarkDown編輯器就方便多了。試過很多Linux下的MarkDown編輯器，愣是沒找到像Mou或者MarkdownPad安裝即用的好編輯器。也曾經試過ReText，安裝的確方便，Ubuntu下<code>apt-install retext</code>就可以了，雖然也有Live View（這在Linux下已經非常難得了），但是默認安裝後界面的簡陋，讓我這樣已經被Mac界面寵壞的人難以接受。而且最重要的是在圖形界面配置沒有找到使編輯器底色設爲暗色系的選項，這點直接導致我“放棄”了ReText。</p>

<p>“放棄”ReText後，我試過很多其他解決方案。</p>

<p>在虛擬機中的Windows使用MarkdownPad，現在Linux下的VirtualBox的體驗也還不錯，問題是解決了，但是這樣做感覺非常笨，太過小題大作，果斷放棄。</p>

<p>用在線的雲MarkDown編輯器，寫作的體驗很好，但是還是不太方便，寫點東西就得佔有一個瀏覽器窗口，而我習慣一般寫東西的同時有得開瀏覽器和一些離線的資源（pdf）查資料，用Alt+Tab不斷在瀏覽器、編輯器、pdf中不斷切換。使用在線編輯器後這樣爽快的切換就很難再進行了，最後還是放棄。</p>

<p>使用其他一些誇平臺編輯器的MarkDown插件。我也曾經試過Sublime的sublimetext-markdown-preview之類的插件，第一個問題可以說是完美解決了，但是同步的Live View的需求還是不能滿足，雖然Sublime寫代碼是一流，但是最終還是忍痛放棄了。</p>

<h2>重拾ReText</h2>

<p>試過了多種方法後，還是覺得原生的MarkDown編輯器靠譜。剛好最近SUSE13.1發佈，安裝過後感覺KDE的用戶體驗上比Ubuntu自己的Unity有過之而無不及。而且本來玩Linux就是爲了折騰，沒有安裝即用的MarkDown編輯器，自己配一個總可以吧。所以最後決定在SUSE上再次挑戰ReText！</p>

<h3>安裝</h3>

<p>SUSE有自己的一套軟件管理工具，類似Ubuntu的apt-get，這裏就不多做介紹了，直接在終端運行下面命令即可。ReText還是比較流行的Linux軟件，他管理工具一般改一下命令也都應該可以安裝。當然，也可以參考ReText的<a href="http://sourceforge.net/projects/retext/">Page</a>，折騰一下源碼安裝。</p>

<pre><code>sudo zypper install retext
</code></pre>

<p>SUSE13.1安裝後的版本爲：<br/>
<img src="http://kamiiyu.github.io/images/2013-12-06/version.png" alt="版本" /><br/>
基於Python2.x（ReText最新版本基於Python3.x的）。</p>

<h3>配置</h3>

<p>默認安裝後的界面還是比較簡陋，所以接下來的重點就是如何給ReText做手術。<br/>
在手術前，首先需要弄清楚兩部分東西，一個是界面，一個Live View。
Retext的界面是基於Qt的，而決定Live View外觀的是CSS。<br/>
所以如果想要改造ReText就需要從這兩部分着手。<br/>
另外，雖然SUSE或者Ubuntu的ReText都有圖形界面的配置畫面，但是配置項目都很少（Ubuntu的稍微多點），但還是不能符合我的期望，因此以下的配置都是按照<a href="http://sourceforge.net/p/retext/wiki/Configuration%20file/">官方文檔</a>直接修改配置文件的。</p>

<h4>配置文件</h4>

<p>默認的配置文件在<code>~/.config/ReText project/ReText.conf</code>，其他的具體配置細節可以參考<a href="http://sourceforge.net/p/retext/wiki/Configuration%20file/">官方文檔</a>。<br/>
在這裏，我只關心兩個問題——界面與Live View如何配置。</p>

<h4>界面</h4>

<p><em>appStyleSheet</em>是關於ReText程序界面的配置。ReText的界面是使用Qt的，因此這個配置實際就是<a href="http://qt-project.org/doc/qt-4.8/stylesheet.html">Qt Style Sheets</a>的配置。<br/>
像我這樣的懶人，實在不想去折騰Qt Style Sheets語法了，有沒有更簡便的配置方法呢？懷着試一試的心情，去github逛了一下，發現還真有人和我的想法是一樣的——<a href="https://github.com/ColinDuquesnoy/QDarkStyleSheet">QDarkStyleSheet</a>。<br/>
這裏我稍微取巧了一下，由於我只需要程序界面的配置，因此我只直接下載Qt的配置<a href="https://github.com/ColinDuquesnoy/QDarkStyleSheet/blob/master/qdarkstyle/style.qss">qss</a>，然後把ReText的<em>appStyleSheet</em>直接指向該Style Sheet。
ReText.conf配置：</p>

<pre><code>appStyleSheet=/home/kamiiyu/.config/ReText project/style.qss
</code></pre>

<h4>Live View</h4>

<p>與Qt配置同樣的思路，看看github上有沒有現成的好東西。對比Qt配置，MarkDown的css配置是容易找多了。最後我選擇的是<a href="https://github.com/jasonm23/markdown-css-themes">markdown-css-themes</a>中的<a href="https://github.com/jasonm23/markdown-css-themes/blob/gh-pages/screen.css">screen.css</a>。</p>

<p>ReText.conf配置：</p>

<pre><code>styleSheet=/home/kamiiyu/.config/ReText project/screen.css
</code></pre>

<p>大功告成，華麗變身後的ReText，帥多了！<br/>
手術前：<br/>
<img src="http://kamiiyu.github.io/images/2013-12-06/origin.png" alt="原始圖" />
手術後：<br/>
<img src="http://kamiiyu.github.io/images/2013-12-06/all.png" alt="完成圖" /></p>

<p>以下是我的ReText.conf，僅供參考。</p>

<pre><code>[General]
recentFileList=/home/kamiiyu/kamiiyu.github.com/source/_posts/2013-12-06-retext.markdown
font=\x6587\x6cc9\x9a7f\x7b49\x5bbd\x6b63\x9ed1
fontSize=9
styleSheet=/home/kamiiyu/.config/ReText project/screen.css
appStyleSheet=/home/kamiiyu/.config/ReText project/appstyle.css
restorePreviewState=true
tabWidth=4
saveWindowGeometry=true
windowGeometry=@ByteArray(\x1\xd9\xd0\xcb\0\x1\0\0\0\0\a\x80\0\0\0T\0\0\n\xa3\0\0\x2\xc6\0\0\a\x82\0\0\0k\0\0\n\xa1\0\0\x2\xc2\0\0\0\0\0\0)
previewState=true
useWebKit=true
</code></pre>

<h2>小遺憾</h2>

<p>OPEN SUSE默認安裝的ReText還是有點不盡人意的地方。<br/>
例如，滾動左邊的工作區的時候，右邊的Live View並不會相應的自動滾動。ReText的開發Tickets也有人彙報過這個<a href="http://sourceforge.net/p/retext/tickets/52/">問題</a>，但似乎還是沒有很好的解決。可能是和環境有關係，因爲最新版本的ReText其實已經建議運行在Python3的環境下，但OPEN SUSE默認還是Python2。有機會在Ubuntu在驗證一下這個問題。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jack是不是管理員？]]></title>
    <link href="http://kamiiyu.github.io/blog/2013/01/29/mrw-admin/"/>
    <updated>2013-01-29T15:29:00+08:00</updated>
    <id>http://kamiiyu.github.io/blog/2013/01/29/mrw-admin</id>
    <content type="html"><![CDATA[<p>　　要問Jack是不是管理員，代碼一般有三種寫法。</p>

<figure class='code'><figcaption><span>php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">if</span> <span class="nx">is_admin</span><span class="p">(</span><span class="nx">Jack</span><span class="p">){</span> <span class="k">echo</span> <span class="s2">&quot;Hi, Jack!&quot;</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">Jack</span><span class="o">.</span><span class="na">is_admin</span><span class="o">()){</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hi, Jack!&quot;</span><span class="o">);</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>ruby </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Hi, Jack!&quot;</span> <span class="k">if</span> <span class="no">Jack</span><span class="o">.</span><span class="n">admin?</span>
</span></code></pre></td></tr></table></div></figure>


<p>　　以上三種方法只有ruby的最一目瞭然，不會看花眼，最接近人的語言習慣。<br/>
　　去除了繁雜的括號、花括號，行文直截了當，寫代碼就像寫文章一樣，甚至連寫註釋的功夫的省去了。<br/>
　　更神奇的<em>admin?</em>這個方法根據ruby的動態特性可以在程序運行的時候才生成，而不需要預先寫好代碼。<br/>
　　以下是我rails項目中的代碼片段：</p>

<figure class='code'><figcaption><span>實際代碼片段 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="n">method_id</span><span class="p">,</span> <span class="o">*</span><span class="n">arguments</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">method_id</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/^can_.*\?$/</span><span class="p">)</span>
</span><span class='line'>    <span class="n">something</span> <span class="o">=</span> <span class="n">method_id</span><span class="o">[</span><span class="mi">4</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">something</span><span class="o">.</span><span class="n">blank?</span>
</span><span class='line'>      <span class="k">super</span><span class="p">(</span><span class="n">method_id</span><span class="p">,</span> <span class="o">*</span><span class="n">arguments</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">class_eval</span> <span class="o">&lt;&lt;-</span><span class="no">METHOD</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">,</span> <span class="bp">__LINE__</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="sh">        def #{method_id}</span>
</span><span class='line'><span class="sh">          self.can_do?(:sub_action =&gt; %{#{something}})</span>
</span><span class='line'><span class="sh">        end</span>
</span><span class='line'><span class="no">      METHOD</span>
</span><span class='line'>      <span class="nb">send</span><span class="p">(</span><span class="n">method_id</span><span class="p">,</span> <span class="o">*</span><span class="n">arguments</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">method_id</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/^dpmt_.*\?$/</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="err">略</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>　　下面解釋一下我的思路：</p>

<ul>
<li>約定查找用戶的權限的方法名為<em>can_do?</em>。假設想確認Jack有沒有游泳的權限，則如下那麼寫：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Jack</span><span class="o">.</span><span class="n">can_swim?</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Jack發現他本身並沒有<em>can_swim?</em>方法，在一系列的處理後他最終調用用了method_missing方法。</li>
<li>method_missing簡單來說只做一件事，判斷Jack是否有swim的權限。</li>
<li>如果想看看Jack有沒有跑步的權限，則直接使用<em>can_run</em>方法，重複以上三個步驟即可。</li>
</ul>


<p>　　對比java，如果需要判斷swin、run、jump三個動作，我們怎麼做？</p>

<ul>
<li>寫三個<em>can_xx</em>方法。<strong>(代碼重複，擴展性差)</strong></li>
<li>寫一個<em>can(xx)</em>方法，每次都把動作當作參數傳進去。<strong>(純主觀看法，括號很難看，不美觀)</strong><br/>
　</li>
</ul>


<p>　　ruby的<em>can_do?</em>是不是很簡單易懂？特別方法尾部畫龍點睛的&#8221;?&ldquo;，比java的<em>is_xx()</em>簡直好看百倍！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[被遺棄的聖經]]></title>
    <link href="http://kamiiyu.github.io/blog/2013/01/28/the-abandoned-bible/"/>
    <updated>2013-01-28T10:35:00+08:00</updated>
    <id>http://kamiiyu.github.io/blog/2013/01/28/the-abandoned-bible</id>
    <content type="html"><![CDATA[<p>　　我的宗教體驗是由一本被遺棄的聖經開始的。<br/>
　　在日本的公共團地（小區）大家都有會把看完的雜誌、漫畫、小說等各種書籍放在樓梯間的固定的地方等待回收。我偶爾也去翻翻，尋尋寶。<br/>
　　一天，我找到一本發黃的聖經。在中學的時候就對聖經有興趣，來日本後也想參加一些宗教活動，體驗一下，可惜一直工作沒時間。沒想到在這種環境下我“收到”人生中第一本聖經。<br/>
　　如獲至寶似的，把聖經拿回宿舍。一來是日語的，而來詞彙好多都不是現代常用的，讀起來非常費勁，翻了一會就放一邊了。<br/>
　　第二天，突然有一男一女來敲門了，男的大概40多歲瘦瘦的說話很有禮貌很客氣，女的應該20多吧，話比較很少，都是日本人。他們第一句就問我知不知道聖經，是否對聖經有興趣，我心抽了一下，就把昨天撿了本聖經並對聖經有興趣的事情告訴他們。在門口和他們聊了好久，後來男的日本人說能不能看看那本聖經，我就拿出來給他看了看。他看了一下，皺了一下眉還給我後，說如果我想學，他們每個星期都可以來宿舍教我，並送一本新的聖經給我，我馬上就答應了。<br/>
　　他們走後，我和室友聊了一下，他也有興趣，就決定一起學習了。<br/>
　　接著的星期天下午，那個日本男人果然來了，不過旁邊的不是上次那個女孩，而是一個帶眼鏡稍微成熟點的女生。<br/>
　　日本男人叫TK，旁邊是他的妻子。他們送了一本手掌大的聖經給我，由於來了才知道室友也想學習，他們說下星期來的時候再拿本聖經和資料給我們。他們對有新成員加入似乎都挺高興。我們四個人聊了好久，主要聊着我們倆的工作生活，剛來日本習慣不習慣啊，對神有什麼感覺之類的。期間，TK又問能不能再看一下那本撿回來的聖經，他看了看，又給他妻子看了看，口中嘀咕了一下“やっぱりね“（果然如此），然後和我說這本聖經寫的不好，以後就看他們送來的就可以了，下星期他會再另外送一本日語的聖經，到時候再和我們說哪裡不好。<br/>
　　很快又到了下個星期天了，他們很準時的來了。帶了三本聖經和好幾本精美的硬皮包裝的圖文版的聖經故事，說送給我們，弄得我們有點不好意思了。<br/>
　　進屋坐下後就和我們解釋上星期留下的謎題了。親密朋友之間會直呼對方的名字，而神就是我們最親密的朋友，所以我們要說出神的名字而不需要忌諱，而我撿的聖經（應該是天主教版本的）把神的名字換成其他稱呼，這是對神的不尊敬，神也不會喜歡這樣，所以不好。<br/>
　　關於神的名字能不能直呼，不同教派有不同的理解，主流的像天主教和新教都是主張不直呼的，所以英文一般用lord，中文用上帝來代替，而一些像TK所在非主流教派卻有自己的一套解釋，也正因此成為了非主流。這種分歧無處不在，大者如猶太教、伊斯蘭教、基督教雖然信奉的用一位真神，但卻由於不同的理解而拼個你死我活；小者如在基督教世界也是派別林立，各不相讓，各稱異端⋯⋯<br/>
　　聖經的學習挺有趣的，TK所在的教派會自己在編寫本教材，然後結合自己翻譯的聖經來教我們。第一課意外的非常“科學”——宇宙起源。教這些無非就是一個目的，讓我們知道人類多渺小，自己為什麼都知道，但是事實上還是很多科學不能解釋的東西，但這些其實都是全知全能的神賜於我們的。<br/>
　　聖經的學習更加激發了我對宗教的興趣，主要的參考來源就是維基百科，英語、日語、繁體中文的幾個版本對比着看，有時候一看就是一整天⋯⋯<br/>
　　所謂的宗教也好、科學也好，其實都是一種信仰而已，歸根結底就是一個“信”字，只能信不能問。若是刨根問底，哪怕是科學，到最後總會發現無法解釋的地方，反過來會讓你更敬畏這個自然界，也許這就是為什麼很多有名的物理學家例如牛頓同時又是虔誠的基督徒的原因。自大的以為自己能解釋一切，其實是無知的表現。<br/>
　　和有信仰的人交往很放心，很快就成為好朋友了。我們基本固定沒星期學習一次，或者來我們宿舍或者去他們家，去他們家的時候他們還會親自下廚。偶爾還會參加他們的大聚會，在那裡認識了不少中國人甚至韓國人。有時候還會組織活動，去賞櫻花、吃烤肉⋯⋯宗教對於他們來說就是一個大家庭，在裡面的都是兄弟姐妹，守望相助，十分融洽。<br/>
　　後來，我才知道原來TK那天是看錯地址才找到我們宿舍，我又一次被神的力量所折服:&ndash;)<br/>
　　但可能由於自己性格的問題，太執著、太喜歡問為什麼了，直到現在，我還是對很多事情有保留，不過有一點我敢確定的是，讓以前教科書上學的東西見鬼去吧⋯⋯</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[文斯雜談 醞釀已久]]></title>
    <link href="http://kamiiyu.github.io/blog/2013/01/25/project-self/"/>
    <updated>2013-01-25T15:21:00+08:00</updated>
    <id>http://kamiiyu.github.io/blog/2013/01/25/project-self</id>
    <content type="html"><![CDATA[<p>　　關於自己的博客醞釀好多年了，學生時代在csdn寫過一段時間博客，也正是csdn的博客被當時的老板看到後，才有機會到日本發展。<br/>
　　但是工作以後一直也沒閒下來，而且後熱衷旅遊和照相，所以一耽誤就6、7年沒寫東西了。<br/>
　　曾經有想過在iteye寫寫自己的博客，但總不太希望受制於人⋯⋯<br/>
　　直到半年多前知道<a href="http://octopress.org/">Octopress</a>這個博客系統，非常喜歡他的口號－－blogging like a hacker，而且由於系統是基於ruby的編寫，只要有時間我可以輕鬆自由的為我的博客添磚加瓦，總之這個就是我夢寐以求的自由的平台。<br/>
　　btw，用<a href="http://baike.baidu.com/view/2311114.htm">markdown</a>＋<a href="http://mouapp.com/">Mou</a>寫博客真的很有黑客的感覺:&ndash;)<br/>
　　所以離開瑞卡後，我寧願先兼職也希望把這個博客搞起來後再找專職的工作，我怕一忙起來又什麼都丟掉了-_&ndash;#<br/>
　　懶惰是最難治的病⋯⋯<br/>
　　總之，這裡是流淌着技術血液的大雜燴:&ndash;)
　　</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[華南商業網 臨危受命]]></title>
    <link href="http://kamiiyu.github.io/blog/2013/01/25/project-hsw/"/>
    <updated>2013-01-25T11:22:00+08:00</updated>
    <id>http://kamiiyu.github.io/blog/2013/01/25/project-hsw</id>
    <content type="html"><![CDATA[<p>　　2011年9月，朋友找到了我，朋友的老東家做的網站－－華南商業網的網站改版一年多了沒弄好，問我有沒有時間幫忙看看。<br/>
　　由於這家公司離家也近，剛開始大概一星期抽空前一次，做做技術指導；離開瑞卡後就以兼職形式加入這個項目。<br/>
　　這是一個關於連鎖市場、專業市場、地產市場等的商業門戶網站。2011年底，由於業務需要，希望做一次改版。網站早在2003年就開始運營，但一直沒做過技術更新，用的是現在已經幾乎沒人用的asp，網站只有一個常規的維護人員，並沒有開發人員。找了家外包公司負責網站的改版，各種原因拖了大半年也沒完成，最後扔下一堆半成品的代碼就拍拍屁股走人了。<br/>
　　新版的網站已經改為用php，數據庫也是我熟悉的mysql，但是服務器竟然還是用windows2003，不過也沒辦法，舊網站是asp＋sqlserver，肯定一套都是m＄的東西。<br/>
　　百廢待興，排版交給原來的維護人員負責，我專注于新版網站基礎結構做調整。半成品代碼可謂是烏煙瘴氣，連最基本的字符編碼都弄的亂七八糟，各種亂碼橫飛。不少功能還沒實現或者有bug，因此我在調整結構的同時還需要把完善功能。代碼半天就看完，php現學現做，不過相比ruby的開發效率，php落後100年-_&ndash;#。接這是服務器的調整優化，為了保證穩定性所以選擇iis運行php，另外由於需要保留舊網站的資源以及部分新功能是我用ruby做的，所以選擇了nginx做反向代理，一個小小的網站用到三種技術兩個數據庫實現，的確夠折騰的。<br/>
　　9月份接觸，11月正式加入，終於趕在老板挑的1月的吉時上線。從我的角度來看問題還是一大堆，服務器硬件老化，大部份元件已經停產；網站結構過於混亂，需要進一步的整合、優化等等。雖然還有這樣那樣的問題，但是折騰了一年多的改版終於完成，公司上下的一塊心頭大石終於放了下來。<br/>
　　臨危受命，這是我做過的技術上最輕鬆的項目，php、windows雖沒有太多的實戰經驗，但一理通百理明，很快的就搞通了；但是項目的壓力卻是最大的，老板曾經說過，如果這次還不行就不改版了，整個項目的成敗都壓在我一個人身上。最終我還是扛過來了，不過也慨嘆這樣的爛尾項目為什麼在中國似乎是常態呢⋯</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[瑞卡租車 如願以償]]></title>
    <link href="http://kamiiyu.github.io/blog/2013/01/24/project-reocar/"/>
    <updated>2013-01-24T16:47:00+08:00</updated>
    <id>http://kamiiyu.github.io/blog/2013/01/24/project-reocar</id>
    <content type="html"><![CDATA[<p>　　2011年，回廣州後正式加入的一個項目。一個我從2007年就想加入的項目，<a href="http://baike.baidu.com/view/45135.htm" title="腳本編程語言">ruby</a>的項目。早在2006年我就知道ruby，2007年在日本自學ruby過一個月左右，就一直想做ruby的項目，但是在那之後由於工作太忙，公司也沒有ruby項目，也就不了了之了，但是我的ruby夢一直沒有停歇過。三言兩語很難說清楚為什麼我會對ruby情有獨鍾，但是如果沒瑞卡租車這個ruby項目，我可能會選擇回日本發展了。<br/>
　　7月25號正式入職，就立刻告知新的ruby系統三個月內就要完成，做好準備替換現有的php系統，因此上班時間是早9點晚9點，沒有雙休，沒有節假日。對於早已經適應日本工作強度的我來說，這個也不算什麼，真正有挑戰性的是ruby和<a href="http://baike.baidu.com/view/663386.htm" title="基於ruby的web開發框架">rails</a>。團隊總共只有五個人，其中一個是team leader K，ruby達人，比我早入職幾個星期；剩下三人都是公司原來php團隊調過來的元老；還有一個業務、技術都不懂的我⋯⋯<br/>
　　記得以前高中英語老師說過，<em>別看有些人寫著精通20多國家語言有多麼了不起，只要學好英語，什麼法語、德語等等就是詞彙量的問題</em>。<br/>
　　我覺得編程語言也同樣的道理，到你真開竅的時候，不會拘泥與某種技術或語言，關心只是怎麼去解決問題。<br/>
　　現學現做，印象最深的是晚上報銷的都城鴨腿飯，還有每天回家繼續工作到一兩點後發郵件匯報的時發現K竟然馬上回了,五人開發團隊的激情可見一斑。<br/>
　　三個月後，立下的軍令狀完成了，再接下來是一個月的測試，到12月底系統正式切換，雖然也有磕磕碰碰，但是新系統總算在一個月後穩定下來。<br/>
　　沒有一切編程規範的繁文縟節，沒有都麼牛x的工具，rails就是我們的規範，ruby就是我們的工具。<br/>
　　五個人五個月不到的時間成功改寫了一個運行了兩年多的業務系統，我們辦到了！<br/>
　　也就是這個時候我第一次知道所謂的創業型公司是什麼樣子的。公司年輕，員工有朝氣，氣氛活躍，來公司不到半年，我有幸的經歷了公司的一次融資，全公司為之而振奮。<br/>
　　伴隨着2011年的年會的結束，我迎來了更有挑戰性的2012。<br/>
　　和原來的php團隊匯合，整個技術團隊一下子飆升為12個人。新系統從測試開始我就是主要的業務對接人，上線後也參與到公司各種運營理會中，而此时带领团队tl却开始退居二线……<br/>
　　3月，半年來幾次小地震後，公司迎來了第一次大地震，至少對於我來說。一個初創時就在公司管理團隊骨幹（也是技術出身）和一直帶領我們的K相繼離開公司，整個技術部頓時群龍無首⋯⋯<br/>
　　4月，公司聘請的新技術部負責人到位⋯⋯<br/>
　　5月，在其他部門的“外科手術“過後，技術部也接到裁員通知，最終只剩下7人⋯⋯<br/>
　　6月，剛來3個月的技術部負責人完成了他的歷史使命後，也揚長而去⋯⋯<br/>
　　在這樣的“亂世”中，卻給我提供了一個展示自己的好機會。從系統上線後到K離去，我已經慢慢的從系統開發工程師轉變為業務負責人，K離去時把技術部所有資料都交接給我，事實上是整個技術部交接給我了。業務系統的需求、網站、郵箱系統、網絡、服務器等無論大小事情都順理成章的變成我的任務，同時由於裁員後人手不足，我還不得不兼顧部分開發的任務。<br/>
　　8月，公司再聘請了一名技術部負責人。<br/>
　　9月，我第一次被叫到ceo辦公室，和ceo暢談後，拿到了也許是創業型公司的“最高獎勵”－－股票期权。<br/>
　　10月，經過一番掙扎後，我向公司提交了辭呈。<br/>
　　如願以償，不僅是技術上的，還是更多是來自努力後被肯定的那份滿足感。加入公司後一個月轉正，三個月後掌管業務系統、半年後時技術部，這一切都都多虧了有K對我的賞識。<br/>
　　開始考慮是否離開，是在6、7月間，當時整個技術部已經趨於穩定，已經從之前的地震恢復過來，而由於公司策略慢慢改為線下，對系統的依賴慢慢減少。人員的變動加上公司策略的改變，那種不眠不休的那種工作激情已經一去不復返，可以選擇留下慢慢混日子，但我還是希望能找一個能發揮自己潛能的新舞台，嘗試更多新事物。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JCBカード 乘风破浪]]></title>
    <link href="http://kamiiyu.github.io/blog/2013/01/24/project-jcb/"/>
    <updated>2013-01-24T14:26:00+08:00</updated>
    <id>http://kamiiyu.github.io/blog/2013/01/24/project-jcb</id>
    <content type="html"><![CDATA[<p>　　2008年，還是日立製作所的項目，客戶是更難纏的JCB，注定了這個項目是個難啃的骨頭。我加入的時候項目已經做了一年多，已經處於系統測試階段，之前開發的整個團隊由於各種原因已經撤走，只剩下文檔和代碼由我們接手，系統三個月後上線⋯⋯<br/>
　　三個月內，用最短的時間熟悉系統，用最短的時間查找並修改測出來的bug，這些也都還好，最麻煩的由於客戶是JCB，整個開發文檔一點都馬虎不得，大大小小從設計到單元測試的文檔全都需要經過客戶review。修改bug的過程更令人髮指，也許只是修改一行代碼，但卻要提交十幾頁的測試結果文檔作為審查，首先是團隊review然後是日立review，沒問題放服務器測試後在整理n張客戶能看懂的測試結果文檔，客戶確認後再發佈到正式服務器。<br/>
　　要件設計&mdash;>基本設計&mdash;>詳細設計&mdash;>編寫代碼&mdash;>單元測試&mdash;>結合測試&mdash;>系統測試&mdash;>發佈後確認。不管是修改bug或者追加功能，不管時間多麼緊，層層review一步都不能少。過程看似死板，但是就是這種紀律性讓我們的團隊在這麼困難的情況下生存了下來，系統上線後，新版本的升級順理成章的還是由我們來負責，而且慢慢也把更多的模塊委託給我們。<br/>
　　我剛去的時候團隊只有7個人，最終發展為三十個人的團隊，中日成員大概對半分，上面一個tl一個pm，再分兩個小團隊，一個負責人機互動頁面，一個負責外部數據的交換和處理，我們所屬的是中期審查模塊。系統另外還分為初期審查、online（臨時審查）三部分，再加上一個業務的團隊，一個運維團隊，總共五team人，總共有100多人。<br/>
　　這個系統是JCB基幹系統JENIUS下面的一個子系統ramda，主要負責信用卡用戶信用度管理，為基幹系統提供信用度參考。用戶的信用數據來源主要來自第三方和JCB自己的數據庫，因此這次項目的重點是第三方和JCB的數據整合。第三方機構就有四家，而JCB的數據也分散在好幾個子系統裡面，測試數據做起來異常的費勁。由於涉及的外部系統接口眾多，而且稍有點錯誤，也許就會讓客戶蒙受巨大損失，沒有如此苛刻的開發流程是根本保證不了質量的。<br/>
　　日立的項目，用的是日立自己的解決方案Justware，不過數據庫就用了更出名oracle，整個框架還是那麼的實而不華，開發人員不需要專注技術細節，只需把握業務細節，不能說很有效率，但是很實用，把犯錯的機會降到最低。部署起來也算方便，圖形化，簡單直接。<br/>
　　整個項目做了兩年多，經歷了三次大的版本升級，直到我2011年回國的的時候，還在做，不夠已經大部份轉為保守了，幾乎沒新功能的追加了。<br/>
　　乘风破浪，項目的難度本身並不高，但是要求卻一點不低，深深的感受到日本人追求細節的那種令人髮指的執著，哪怕空格是用全角還是半角都會仔細檢查。從開始無數次的review不通過重寫文檔到後來的一次通過，比攻克一個技術難題更有成就感。<br/>
　　商業系統開發發展必然朝越來越模式化的發展，這樣企業承擔的成本也許高點，但大大降低了失敗的機率，因為整個項目的成敗靠的整個團隊而不是個人。<br/>
　　兩個項目，五年的日本開發經驗，讓我獲益良多，但是我還是決定回廣州⋯⋯</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[東急リバブル 牛刀初試]]></title>
    <link href="http://kamiiyu.github.io/blog/2013/01/24/project-toukyu/"/>
    <updated>2013-01-24T10:21:00+08:00</updated>
    <id>http://kamiiyu.github.io/blog/2013/01/24/project-toukyu</id>
    <content type="html"><![CDATA[<p>　　2007年，五月從公司組織的富士山旅遊回來後，終於迎來了我在日本的第一個項目。地點在横浜，從我當時住的東京都江東区去需要有一個多小時的電車，這意味著我每天需要七點十五分就要出門。現在回想起來，的確有點遠，但當時初生牛犢，沒多想就接下了公司的這個任務。<br/>
　　項目的老大是一個愛吃糖的日本老頭，每次邊吃著糖邊和坐在旁邊的leader聊著項目的事情，幾乎我們面前正經吃過飯。leader是一個很友善的日本人，經常“呵呵”大笑，而且和我也有共同語言&mdash;<strong><a href="http://baike.baidu.com/view/5931.htm" title="日本國民機器人動畫">ガンダム</a></strong>。其他成員還有四個日本人，八個中國人，總共十四人的團隊。<br/>
　　項目是日立製作所的一個不動產的管理系統，客戶是東急リバブル，我們十四個人負責的是物件模塊，負責待售、待租房屋信息的管理。<br/>
　　我是從基本設計階段加入的，第一個任務就是看圖說故事，參照設計原型，寫出設計文檔，讓開發人員知道這些頁面是做什麼的，互相有什麼聯繫。本以為直接寫代碼的活，沒想到是從設計開始！？讓非科班出身的日語一級的我有點措手不及，來日本快半年了，第一次有挫折感，＞＜。不過還好有朝鮮族的同事，他們的日語都頂呱呱，幫了我不少，而且後來我也發現竅門，設計文檔其實挺死板的，老大們的要求就是言簡意賅，把事情說清楚就好，也不需要你寫得多漂亮，所以參照已經寫好的文檔，修修改改也基本完成了七、八成，剩下的自己再發揮一下。總體來說，設計這部分當時我的確沒做得太好，也就是勉強及格，主要是做得太慢。一個多月後就進入了開發階段，我的show time即將開始了。<br/>
　　show time誇張了點，但進入開發階段確實順手多了，我在團隊裡面的作用開始發揮出來了。設計的時候，是我把未完成的部分交給其他同事完成，而開發的時候卻恰恰相反，是其他同事未完成的交給我，有時候還需要幫他們debug。原因很簡單，因為團隊十四個人裡面，有java經驗的人包括我只有三個中國人，日本成員和其他中國成員都沒接觸java的，都是現學現做，而這個項目主要用java實現，少部分批處理是用COBOL實現。<br/>
　　有好的設計，開發就沒太多難度了，而且技術使用的是日立自己的解決方案，一個在struts1基礎上二次開發的框架，為這個項目又擴展了部分功能，因此在技術上沒遇到多少困難。就是有個自動解壓縮的功能稍微查了一下java文檔，其他基本就是逼著眼睛就把代碼寫好了。<br/>
　　基本設計、開發、單元測試，在這期間不斷像日立總部反饋再修改，n個來回後，到九月分被告知第一階段已經完成，剩下的工作需要到東京大森的總部和其他模塊匯合，一起開發。終於可以結束每天幾乎三個小時的電車生涯了:&ndash;) <br/>
　　來到大森後完全是另一番景象，第一次感到日本的工作壓力。<br/>
　　我們這個項目其實總共分四大模塊，加上統籌的日立總部團隊，總共分成五個團隊。出了我們物件團隊外，還有負責顧客管理的顧客團隊，大概7、8人左右；負責契約管理的契約團隊，因為是整個項目中最重要的模塊，光設計就至少十幾人，開發是外包的中國的一家公司，開發人員都是從中國直接請到日本集中開發，整個團隊估計至少應該有三、四十人；最後就是為各個模塊提供api和技術支持的共通團隊。<br/>
　　在大森的主要任務的就是系統測試。自己寫文檔，自己開發測試，很順利，沒發現什麼問題，但一旦和其他模塊一起測試，就各種問題都來了。而且在大森還有來自客戶東急リバブル的負責人，客戶自己也組織自己的員工加入測試，本以為工作地點近了，可以輕鬆點，但真正的挑戰才剛開始。每天光自己測試就問題一大堆，還要兼顧其他團隊和客戶測出來bug，加上每天各種進度會，各種壓力無限大。不過對比最大的契約團隊我們算是輕鬆多了，估計是他們之前在中國時候開發的時候溝通不夠好，問題特別多，所以最後索性把人都叫到日本直接和設計團隊一起開發，看著他們的bse夾在設計和開發之間那種著急啊，沒法形容。迫於進度上的壓力，我們團隊最後也沒辦法也請了外援－－韓國測試團。<br/>
　　日本人開會，中國人開發，韓國人測試。這樣大約又折騰了半年，慢慢的，契約團隊的中國開發人員慢慢撤走了，我們的韓國測試團也退場了，項目終於上線進入保守階段，最後我也退出了項目。<br/>
　　牛刀初試，一絲不苟的工作態度是這個團隊教會我最寶貴的東西。</p>
]]></content>
  </entry>
  
</feed>
