<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | 文斯雜談凸^-^凸]]></title>
  <link href="http://kamiiyu.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://kamiiyu.github.io/"/>
  <updated>2017-02-22T18:00:26+08:00</updated>
  <id>http://kamiiyu.github.io/</id>
  <author>
    <name><![CDATA[文斯]]></name>
    <email><![CDATA[spicekamiiyu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[浅谈ActiveRecord的N + 1查询问题]]></title>
    <link href="http://kamiiyu.github.io/blog/2017/02/21/n-plus-1-queries-of-active-record/"/>
    <updated>2017-02-21T11:37:27+08:00</updated>
    <id>http://kamiiyu.github.io/blog/2017/02/21/n-plus-1-queries-of-active-record</id>
    <content type="html"><![CDATA[<h2>ORM框架的性能小坑</h2>

<p>在使用ActiveRecord这样的ORM工具时，常会嵌套遍历model。<br/>
例如，有两个model，Post、Comment，关系是一对多。</p>

<p>```
class Post &lt; ApplicationRecord
  has_many :comments
end</p>

<p>class Comment &lt; ApplicationRecord
  belongs_to :post
end
```</p>

<p> 总共有4个post。</p>

<p>```</p>

<blockquote><p>Post.count
(0.1ms)  SELECT COUNT(*) FROM &ldquo;posts&rdquo;
=> 4
```
获取每个post的所有comment，我们可以：</p></blockquote>

<p>```</p>

<blockquote><p>Post.all.map{|post| post.comments}
  Post Load (0.3ms)  SELECT &ldquo;posts&rdquo;.<em> FROM &ldquo;posts&rdquo;
  Comment Load (0.2ms)  SELECT &ldquo;comments&rdquo;.</em> FROM &ldquo;comments&rdquo; WHERE &ldquo;comments&rdquo;.&ldquo;post_id&rdquo; = ?  [[&ldquo;post_id&rdquo;, 1]]
  Comment Load (0.4ms)  SELECT &ldquo;comments&rdquo;.<em> FROM &ldquo;comments&rdquo; WHERE &ldquo;comments&rdquo;.&ldquo;post_id&rdquo; = ?  [[&ldquo;post_id&rdquo;, 2]]
  Comment Load (0.6ms)  SELECT &ldquo;comments&rdquo;.</em> FROM &ldquo;comments&rdquo; WHERE &ldquo;comments&rdquo;.&ldquo;post_id&rdquo; = ?  [[&ldquo;post_id&rdquo;, 3]]
  Comment Load (0.6ms)  SELECT &ldquo;comments&rdquo;.* FROM &ldquo;comments&rdquo; WHERE &ldquo;comments&rdquo;.&ldquo;post_id&rdquo; = ?  [[&ldquo;post_id&rdquo;, 4]]
```</p></blockquote>

<p>可以看到为了得到4条数据，我们执行了5（4 + 1）次的查询，这就是所谓N + 1查询问题。</p>

<h2>发现问题</h2>

<p>除了凭经验外，有一些gem也可以帮助我们提早发现N + 1查询问题。<br/>
例如收费的<a href="https://newrelic.com/">New Relic</a>，免费的<a href="https://github.com/flyerhzm/bullet">Bullet</a>。</p>

<h2>解决问题</h2>

<h3>预加载</h3>

<p>简单来说，就是提前加载model关系，让ActiveRecord预先加载所需要的数据。<br/>
ActiveRecord提供了以下三个方法预加载。</p>

<ul>
<li><code>includes</code></li>
<li><code>preload</code></li>
<li><code>eager_load</code></li>
</ul>


<p>他们的区别可以参考<a href="http://blog.bigbinary.com/2013/07/01/preload-vs-eager-load-vs-joins-vs-includes.html">这里</a>或<a href="https://ruby-china.org/topics/17866">这里</a>。<br/>
以最常用的<code>includes</code>方法为例。</p>

<p>```</p>

<blockquote><p>Post.includes(:comments).map{|post| post.comments}
  Post Load (0.2ms)  SELECT &ldquo;posts&rdquo;.<em> FROM &ldquo;posts&rdquo;
  Comment Load (0.5ms)  SELECT &ldquo;comments&rdquo;.</em> FROM &ldquo;comments&rdquo; WHERE &ldquo;comments&rdquo;.&ldquo;post_id&rdquo; IN (1, 2, 3, 4)
```
得到的结果一样，但执行的查询只有两次。</p></blockquote>

<h3>傻瓜式预加载(Goldiloader)</h3>

<h4>传统预加载的“问题”</h4>

<p><code>includes</code>方法的确很惊艳，但……</p>

<p>第一，代码不够优雅。<br/>
例如，假设我们现在想找的是id在1到3之间的post的comment。<br/>
一般的我们的逻辑是，查找id在1到3之间的post，获取各post的comment然后合并。<br/>
而预加载后的逻辑是，查找id在1到3之间的post，<font color='red'><strong>关联comment，再</strong></font>获取各post的comment然后合并。<br/>
总觉得有点冗余。</p>

<p>```</p>

<blockquote><p>Post.where(id: 1..3).includes(:comments).map{|post| post.comments}
  Post Load (0.5ms)  SELECT &ldquo;posts&rdquo;.<em> FROM &ldquo;posts&rdquo; WHERE (&ldquo;posts&rdquo;.&ldquo;id&rdquo; BETWEEN ? AND ?)  [[&ldquo;id&rdquo;, 1], [&ldquo;id&rdquo;, 3]]
  Comment Load (0.5ms)  SELECT &ldquo;comments&rdquo;.</em> FROM &ldquo;comments&rdquo; WHERE &ldquo;comments&rdquo;.&ldquo;post_id&rdquo; IN (1, 2, 3)
```</p></blockquote>

<p>第二，不符合DRY。<br/>
既然我们都不喜欢N + 1，那就应该从源头上杜绝，而不是每次查询时都要主动<code>includes</code>一次。</p>

<h4>Goldiloader</h4>

<p>懒癌程序员的救星<a href="https://github.com/salsify/goldiloader">Goldiloader</a>——几乎完美的解决了以上两个问题。</p>

<p><code>
gem 'goldiloader'
</code></p>

<p><code>bundle install</code>以后，就可以用最直接（傻瓜）的方式点点点……</p>

<p>```</p>

<blockquote><p>Post.where(id: 1..3).map{|post| post.comments}
  Post Load (0.2ms)  SELECT &ldquo;posts&rdquo;.<em> FROM &ldquo;posts&rdquo; WHERE (&ldquo;posts&rdquo;.&ldquo;id&rdquo; BETWEEN ? AND ?)  [[&ldquo;id&rdquo;, 1], [&ldquo;id&rdquo;, 3]]
  Comment Load (0.3ms)  SELECT &ldquo;comments&rdquo;.</em> FROM &ldquo;comments&rdquo; WHERE &ldquo;comments&rdquo;.&ldquo;post_id&rdquo; IN (1, 2, 3)
```</p></blockquote>

<h5>auto_include</h5>

<p>Goldiloader默认自动加载所有关联数据，用<code>auto_include: false</code>可以方便地关闭自动加载。</p>

<p><code>
class Post &lt; ApplicationRecord
  has_many :comments, auto_include: false
end
</code></p>

<h5>fully_load</h5>

<p>以下的方法比较特殊，如果关系已经加载了，则会直接返回已缓存的值，如果没被加载，则会通过SQL查询。</p>

<ul>
<li>first</li>
<li>second</li>
<li>third</li>
<li>fourth</li>
<li>fifth</li>
<li>forty_two</li>
<li>last</li>
<li>size</li>
<li>ids_reader</li>
<li>empty?</li>
<li>exists?</li>
</ul>


<p>假设现在我们需要获取每个post的最新的comment。</p>

<p>```</p>

<blockquote><p>Post.all.sum{|post| [post.id, post.comments.last&amp;.content]}
  Post Load (0.1ms)  SELECT &ldquo;posts&rdquo;.<em> FROM &ldquo;posts&rdquo;
  Comment Load (0.1ms)  SELECT  &ldquo;comments&rdquo;.</em> FROM &ldquo;comments&rdquo; WHERE &ldquo;comments&rdquo;.&ldquo;post_id&rdquo; = ? ORDER BY &ldquo;comments&rdquo;.&ldquo;id&rdquo; DESC LIMIT ?  [[&ldquo;post_id&rdquo;, 1], [&ldquo;LIMIT&rdquo;, 1]]
  Comment Load (0.1ms)  SELECT  &ldquo;comments&rdquo;.<em> FROM &ldquo;comments&rdquo; WHERE &ldquo;comments&rdquo;.&ldquo;post_id&rdquo; = ? ORDER BY &ldquo;comments&rdquo;.&ldquo;id&rdquo; DESC LIMIT ?  [[&ldquo;post_id&rdquo;, 2], [&ldquo;LIMIT&rdquo;, 1]]
  Comment Load (0.1ms)  SELECT  &ldquo;comments&rdquo;.</em> FROM &ldquo;comments&rdquo; WHERE &ldquo;comments&rdquo;.&ldquo;post_id&rdquo; = ? ORDER BY &ldquo;comments&rdquo;.&ldquo;id&rdquo; DESC LIMIT ?  [[&ldquo;post_id&rdquo;, 3], [&ldquo;LIMIT&rdquo;, 1]]
  Comment Load (0.1ms)  SELECT  &ldquo;comments&rdquo;.* FROM &ldquo;comments&rdquo; WHERE &ldquo;comments&rdquo;.&ldquo;post_id&rdquo; = ? ORDER BY &ldquo;comments&rdquo;.&ldquo;id&rdquo; DESC LIMIT ?  [[&ldquo;post_id&rdquo;, 4], [&ldquo;LIMIT&rdquo;, 1]]
```
这不是我们想要的。</p></blockquote>

<p>添加选项<code>full_load: true</code>后,当调用上述方法时，Goldiloader会强制自动加载所需的关系。</p>

<p><code>
class Post &lt; ApplicationRecord
  has_many :comments, fully_load: true
end
</code></p>

<p>这才是我们想要的。</p>

<p>```</p>

<blockquote><p>Post.all.sum{|post| [post.id, post.comments.last&amp;.content]}
  Post Load (0.3ms)  SELECT &ldquo;posts&rdquo;.<em> FROM &ldquo;posts&rdquo;
  Comment Load (0.2ms)  SELECT &ldquo;comments&rdquo;.</em> FROM &ldquo;comments&rdquo; WHERE &ldquo;comments&rdquo;.&ldquo;post_id&rdquo; IN (1, 2, 3, 4)
```</p></blockquote>

<h4>Goldiloader也不是万能的</h4>

<h5>has_one使用SQL limit时的隐患</h5>

<p>Goldiloader是ActiveRecord的衍生工具，所以ActiveRecord预加载的副作用也一并继承了。<br/>
现在我们自定义一个<code>has_one</code>关系，用以获取最新的一条comment。</p>

<p><code>
class Post &lt; ApplicationRecord
  has_many :comments, fully_load: true
  has_one :latest_comment, -&gt; { order(created_at: :desc) }, class_name: 'Comment'
end
</code></p>

<p>遍历post获取最新的comment。</p>

<p>```</p>

<blockquote><p>Post.all.map{|post| post.latest_comment}
```</p></blockquote>

<p>不使用Goldiloader或者预加载时，每条SQL自动回加上<code>limit 1</code>。</p>

<p><code>
Post Load (0.3ms)  SELECT "posts".* FROM "posts"
Comment Load (0.2ms)  SELECT  "comments".* FROM "comments" WHERE "comments"."post_id" = ? ORDER BY "comments"."created_at" DESC LIMIT ?  [["post_id", 1], ["LIMIT", 1]]
Comment Load (0.2ms)  SELECT  "comments".* FROM "comments" WHERE "comments"."post_id" = ? ORDER BY "comments"."created_at" DESC LIMIT ?  [["post_id", 2], ["LIMIT", 1]]
Comment Load (0.1ms)  SELECT  "comments".* FROM "comments" WHERE "comments"."post_id" = ? ORDER BY "comments"."created_at" DESC LIMIT ?  [["post_id", 3], ["LIMIT", 1]]
Comment Load (0.1ms)  SELECT  "comments".* FROM "comments" WHERE "comments"."post_id" = ? ORDER BY "comments"."created_at" DESC LIMIT ?  [["post_id", 4], ["LIMIT", 1]]
</code></p>

<p>使用Goldiloader或者预加载时，世界变清净了，但同时会有性能隐患，因为post的数据可能非常大量。</p>

<p>```</p>

<pre><code>  Post Load (0.5ms)  SELECT "posts".* FROM "posts"
  Comment Load (0.2ms)  SELECT "comments".* FROM "comments" WHERE "comments"."post_id" IN (1, 2, 3, 4) ORDER BY "comments"."created_at" DESC
</code></pre>

<p>```</p>

<h5>其他限制</h5>

<p>遇到以下的关系，Goldiloader会自动关闭自动预加载。</p>

<ul>
<li>limit</li>
<li>offset</li>
<li>finder_sql</li>
<li>group (due to a Rails bug)</li>
<li>from (due to a Rails bug)</li>
<li>joins (only Rails 4.0/4.1 &ndash; due to a Rails bug)</li>
<li>uniq (only Rails 3.2 &ndash; due to a Rails bug)</li>
</ul>


<h2>本文结束之前</h2>

<p>N + 1查询问题是一个容易被忽略的问题，<code>includes</code>已经够用，Goldiloader更是锦上添花，对新手足够友好。<br/>
不过对于我这种被Rails“坑”习惯的斯德哥尔摩症候群患者来说，没有<code>includes</code>反而没安全感了>_&lt;|||</p>

<h2>参考文档</h2>

<ul>
<li><a href="http://guides.rubyonrails.org/active_record_querying.html#eager-loading-associations">Eager Loading Associations</a></li>
<li><a href="https://github.com/salsify/goldiloader">Goldiloader</a></li>
<li><a href="http://www.salsify.com/blog/engineering/automatic-eager-loading-rails">AUTOMATIC EAGER LOADING IN RAILS</a></li>
<li><a href="https://github.com/kamiiyu/n_plus_1_demo">本文例子</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[非动态，也非静态，Ruby3 Typing 的第三条路]]></title>
    <link href="http://kamiiyu.github.io/blog/2016/11/30/ruby3-typing/"/>
    <updated>2016-11-30T15:55:35+08:00</updated>
    <id>http://kamiiyu.github.io/blog/2016/11/30/ruby3-typing</id>
    <content type="html"><![CDATA[<p>Matz在2016年的Rubykaigi里做了一个关于Ruby3 Typing的分享。<br/>
首先简单介绍一下什么是<a href="https://ja.wikipedia.org/wiki/RubyKaigi">RubyKaigi</a>。<br/>
Kaigi就是日语【会議】的罗马字母写法，顾名思义也就是在日本举行的RubyConf。<br/>
RubyKaigi在2006年首次举行时的名字就是【日本Rubyカンファレンス】（Japan Ruby Conference），由于容易与<a href="http://rubycentral.org/">Ruby Central</a>混淆，因此在2007年改名为【日本Ruby会議】，直到2011年停办。<br/>
2013年大会重开，改名为【RubyKaigi】，并统一使用英语作为大会的官方名称。</p>

<p>今年的<a href="http://rubykaigi.org/2016/">RubyKaigi2016</a>在9月8号到10号京都举行。由于近水流台，有不少像Matz这样的Ruby committer参与分享，所以大会含金量非常高。<br/>
<a href="http://rubykaigi.org/2016/">官网</a>中以及发布了所有视频，希望以后有机会可以亲身去感受下。</p>

<p>大会的首个Topic是Matz的 <a href="http://rubykaigi.org/2016/presentations/yukihiro_matz.html">Ruby3 Typing</a>（<a href="https://www.youtube.com/watch?v=2Ag8l-wq5qk">油管直通车</a>）</p>

<p><img src="/images/2016-11-30/02.ruby3_typing.png" alt="02.ruby3_typing" /></p>

<p>演讲者Matz就不多做介绍了。</p>

<p><img src="/images/2016-11-30/01.matz.png" alt="01.matz" /></p>

<p>官方没有提供在线版的PPT，我把这个日语演讲“翻译”成以下的文字，为了保持文字通顺，稍微加工了一下。</p>

<hr />

<h2>Ruby3 Typing（Matz）</h2>

<p>在2010年以来的新语言很多都是静态类型语言（Static Typed Languages），例如TypeScript、Flow、Go、Swift等等。<br/>
与之相比，Ruby没有静态类型，又是上世纪90年代语言，所以有些人会说“Ruby is Dead”、“Rails is Dead”。</p>

<p><img src="/images/2016-11-30/03.no_static_typing.png" alt="03.no_static_typing" /></p>

<p>但技术有时候就像钟摆，有时候偏向一种技术，有时候又偏向另外一种技术，这是常有的事情。例如静态类型与动态类型“之争”。</p>

<ul>
<li><p>1970s到1980s左右，从Smalltalk、lisp摆到Java、C++</p></li>
<li><p>接下来又从Java摆到Ruby、JavaScript</p></li>
<li><p>到最近又从Ruby、JavaScript摆到Swift、Go</p></li>
</ul>


<p>那么未来Swift、Go又会摆到哪里去呢？未来Ruby3的类型又会有什么改变呢？</p>

<p>首先我们需要知道什么是Ruby的type？对于动态类型语言来说，<font color='red'>Class不是类型</font>。<br/>
另外在Ruby其中一个重要的原则就是<a href="https://en.wikipedia.org/wiki/Duck_typing">Duck typing</a>，也就是说对于一个Ruby对象来说，我们不关心她继承关系（inheritance），也不关心她的内部结构（structure），我们只关心她的行为（behaves）。</p>

<p>请看下面<code>String IO</code>的例子。</p>

<p>Ruby版本的日志输出代码片段：</p>

<pre><code>log(STDERR, "error!")  
</code></pre>

<p>静态类型版本：</p>

<pre><code>log(dst IO, mesg String)
</code></pre>

<p>Ruby <code>StringIO</code>版本：</p>

<pre><code>sio = StringIO.new()
log(sio, "error!")
sio.string # =&gt; retrieve string
</code></pre>

<p>上面的<code>StringIO</code>例子在静态类型的世界行不通，因为<code>StringIO</code>没有与<code>IO</code>有共同的<code>superclass</code>或<code>interface</code>，所以无法通过编译。</p>

<p>Duck typing使我们在开发的时候不需花时间研究各个Class间的关系，大大降低开发者的开发成本，而且扩展起来也更加灵活。<br/>
所以我们可以认为，在Ruby的type就是“Duck”。“Duck”不是Java那样的<a href="https://en.wikipedia.org/wiki/Nominal_type_system">Nominal type</a>，更不是Class，它是一种被<font color='red'>期待</font>的行为。</p>

<p><img src="/images/2016-11-30/04.duck_is_behavior.png" alt="04.duck_is_behavior" /></p>

<p>“期待”只是存在于我们的脑子里面，很暧昧的想法，也正因此Ruby的Type可以很灵活，对比用Class来定义Type的方式会有很多限制。</p>

<p><img src="/images/2016-11-30/04.typing_by_class.png" alt="04.typing_by_class" /></p>

<p>对比Nominal typing，我（Matz）更喜欢Go的Interface，也就是<a href="https://en.wikipedia.org/wiki/Structural_type_system">Structural Subtyping</a>这种方式。</p>

<p><img src="/images/2016-11-30/04.go_interface.png" alt="04.go_interface" /></p>

<p>在上面的例子中，上面三行定义一个包含<code>Write</code>方法的interface <code>LogDst</code>，下面三行的log函数接受两个参数<code>LogDst</code>和字符串<code>mesg</code>。在这个函数里我们只需要<code>LogDst</code>有<code>Write</code>的行为（方法）就可以了， 它可能是输出到standard IO、String，或者其他什么地方，我们并不需要关心它的内部逻辑。<br/>
Structural Subtyping和Duck typing同样保持很好的灵活性，当然我（Matz）还是更喜欢Ruby的Duck Typing :&ndash;)。</p>

<p><img src="/images/2016-11-30/05.duck_typing_is_awesome.png" alt="05.duck_typing_is_awesome" /></p>

<p>DRY(Don&rsquo;t repeat yourself)是Ruby另外一个重要原则。</p>

<p><img src="/images/2016-11-30/06.do_not_repeat_yourself.png" alt="06.do_not_repeat_yourself" /></p>

<p>为了避免不必要的重复，我们不会在程序写实际上不需要的东西，也就是说Ruby程序的运行不依赖于type annotations，因此我们就不需要它们，甚至要去除它们。</p>

<p>但是Dynamic Typing也是存在不少不足的地方。</p>

<ul>
<li>在程序运行时能发现错误<br/>
<img src="/images/2016-11-30/07.errors_only_found_in_runtime.png" alt="07.errors_only_found_in_runtime" /></li>
<li>error message不友好，信息量少，下面可能是我们最熟悉但又“莫名其妙”的错误信息<br/>
<img src="/images/2016-11-30/08.undefined_method.png" alt="08.undefined_method" /></li>
<li>如果测试覆盖不够，可能会有预想不到的typing error</li>
<li>缺少文档，像Ruby这样没有类型的语言写程序的时候非常爽，但读程序的时候就可能有困难了，所以有些人会写下面这样的注释<br/>
<img src="/images/2016-11-30/09.document.png" alt="09.document" /></li>
</ul>


<p>可能会有人吐槽，最终不还是要把类型写出来吗。。。<br/>
但。。。无论如何还是不想指定类型，绝对不想。。。（Matz特别强调两次，全场都笑了）</p>

<p><img src="/images/2016-11-30/10.do_not_want_to_specify_types.png" alt="10.do_not_want_to_specify_types" /></p>

<p>因为这样会降低程序的灵活性，但为了以后的维护，我们又希望有可读性好的文档。<br/>
除了把类型信息像刚才那样写在注释外，还有另外一个做法是把他写在文档中。把类型写在文档里，但实际程序又不会做类型检查，到头来实际两边都没有讨好。<br/>
至少对Ruby来说Type Annotation，Mixed/Gradual都不是好主意。</p>

<p>正是因为还有以上种种问题，Ruby还有很多改进的空间，</p>

<p><img src="/images/2016-11-30/11.room_for_improvement.png" alt="11.room_for_improvement" /></p>

<p>并且我们作为一个工程师应该要主动去解决这些问题。</p>

<p><img src="/images/2016-11-30/12.solve_problems.png" alt="12.solve_problems" /></p>

<p>有些人提出了Static Typing with <a href="https://en.wikipedia.org/wiki/Type_inference">Type Inference</a>的解决方案，但这个方案还是没能解决静态类型不够灵活的缺点。<br/>
又有人提出Gradual Typing 或者 Optinal Typing的解决方案，但这两种类型实际还是静态类型，因此灵活性这个问题还是没能得到解决。<br/>
Ruby需要除上面以外其他的什么东西，一种像Static Typing这样进行类型检查，但又像Duck Typing这样灵活的类型。</p>

<p><img src="/images/2016-11-30/13.static_type_with_duck_typing.png" alt="13.static_type_with_duck_typing" /></p>

<p>暂且就把她叫做Soft typing。</p>

<p><img src="/images/2016-11-30/14.soft_typing.png" alt="14.soft_typing" /></p>

<p>Soft typing是一套用行为来定义的Type System。</p>

<p><img src="/images/2016-11-30/15.soft_typing_system.png" alt="15.soft_typing_system" /></p>

<p>所谓行为就是一组的方法和参数数量、类型等。</p>

<p><img src="/images/2016-11-30/16.behavior_is_a_set_of_method.png" alt="16.behavior_is_a_set_of_method" /></p>

<p>回到刚才日志输出的例子，Go版本的interface其实可以让程序自动生成，并且我们写程序的时候也不需要关心
interface(Type)的名字(取名字对有些人来说是件麻烦事)，</p>

<p><img src="/images/2016-11-30/17.not_to_worry_about_type_names.png" alt="17.not_to_worry_about_type_names" /></p>

<p>因此我们只可以忽略这些细节，专注于程序开发。（Happy Programming的真谛）</p>

<p><img src="/images/2016-11-30/18.vague_ideas.png" alt="18.vague_ideas" /></p>

<p>例如，我们可以把Type信息搜集起来，就像放到数据库中一样。然后，我看可以从这个数据库中获取Type的定义和Type行为（方法）。<br/>
我们也这些Type信息看做是一种表达式（expression），</p>

<p><img src="/images/2016-11-30/19.retrieve_a_type_as_a_expression.png" alt="19.retrieve_a_type_as_a_expression" /></p>

<p>例如，我们可以检查当把A表达式赋值给B表达式时是否兼容。</p>

<p><img src="/images/2016-11-30/20.check_compatiblity.png" alt="20.check_compatiblity" /></p>

<p>我们也可以检查某个类型有没有对应的方法。</p>

<p><img src="/images/2016-11-30/21.check_method.png" alt="21.check_method" /></p>

<p>这样的做法也许并不能做到100%的类型检查，但还是比之前一点都没用要好。</p>

<p><img src="/images/2016-11-30/22.better_than_nothing.png" alt="22.better_than_nothing" /></p>

<p>如果找不到对应的类型信息，由于本来就是dynamic typing，那么我们就退回到dynamic typing就可以了。</p>

<p><img src="/images/2016-11-30/23.fallback.png" alt="23.fallback" /></p>

<p>有两种方式实现Soft typing。</p>

<p>一个是利用ad-hoc type的信息。<br/>
例如，有a表达式（也有可能是变量），我们期望她有gsub，slice，map三个方法，如果找不到有对应的class满足这个条件的，那就抛出错误信息。</p>

<p><img src="/images/2016-11-30/24.ad_doc_example.png" alt="24.ad_doc_example" /></p>

<p>但对于在运行时不断动态添加或修改的方法，这种检查方式就无能为力了。</p>

<p>另外一个是在运行时搜集类型信息，</p>

<p><img src="/images/2016-11-30/25.collect_from_runtime.png" alt="25.collect_from_runtime" /></p>

<p>特别是在测试的时候，</p>

<p><img src="/images/2016-11-30/26.collect_from_test.png" alt="26.collect_from_test" /></p>

<p>一般Libray或者Gem都会进行测试，那么我们可以在测试的同时，建立类型数据库。<br/>
这样我们就可以在发布Gem的同时，以某种方式一起创建和发布与之对应的类型数据库。</p>

<p><img src="/images/2016-11-30/27.build_type_database_from_gem.png" alt="27.build_type_database_from_gem" /></p>

<p>IDE也可以利用这些Type Database的信息，让我们可以构造更加有效率、聪明的开发环境。<br/>
可惜的是在先阶段以上这些暂时都还只是构想，我们还不能用到。</p>

<p><img src="/images/2016-11-30/28.still_mere_concept.png" alt="28.still_mere_concept" /></p>

<p>所以让我们一起期待Ruby3吧！</p>

<p><img src="/images/2016-11-30/29.part_of_ruby3.png" alt="29.part_of_ruby3" /></p>

<p>最后，我们（Ruby committees）有一个很重要的信息传递给大家，我们是非常重视开发者的。</p>

<p><img src="/images/2016-11-30/30.we_care_about_you.png" alt="30.we_care_about_you" /></p>

<p>我们不会对Dynamic typing的“缺点“视而不见，或者叫开发者多做测试就了事，而是希望努力的改善Ruby，让开发者有更好的开发体验。</p>

<p><img src="/images/2016-11-30/31.willing_improve_development_experience.png" alt="31.willing_improve_development_experience" /></p>

<p>关于Ruby3什么时候发布，目前还是不知道。。。</p>

<p><img src="/images/2016-11-30/32.i_dont_know.png" alt="32.i_dont_know" /></p>

<p>从committee management的角度来看，开源软件一般没有所谓的dead line，也没有很明确的road map，至少对于Ruby这个项目来说没有。但如果什么都没有又很难开展工作，因此我们对Ruby3的开发指定了3个目标。</p>

<p><img src="/images/2016-11-30/33_three_goals_of_ruby3.png" alt="33_three_goals_of_ruby3" /></p>

<p>就像当年美国登月一样，也是先定了一个困难、远大的目标，然后大家一起为之努力，最后成功。<br/>
那Ruby3的三个目标什么时候才能实现呢？我（Matz）希望在下一次的日本奥运会的时候。。。</p>

<p><img src="/images/2016-11-30/34.wait_for_years.png" alt="34.wait_for_years" /></p>

<p>虽然Ruby3还”遥遥无期“，但Ruby前进的脚步是不会停止的。</p>

<p><img src="/images/2016-11-30/35.keep_moving_forward.png" alt="35.keep_moving_forward" /></p>

<p><img src="/images/2016-11-30/36.i_promise.png" alt="36.i_promise" /></p>

<p>我们会一直不遗余力的帮助广大开发者在编程中找到乐趣&mdash;Happy Hacking！</p>

<p><img src="/images/2016-11-30/37.happy_hacking.png" alt="37.happy_hacking" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jack是不是管理員？]]></title>
    <link href="http://kamiiyu.github.io/blog/2013/01/29/mrw-admin/"/>
    <updated>2013-01-29T15:29:00+08:00</updated>
    <id>http://kamiiyu.github.io/blog/2013/01/29/mrw-admin</id>
    <content type="html"><![CDATA[<p>　　要問Jack是不是管理員，代碼一般有三種寫法。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">if</span> <span class="nx">is_admin</span><span class="p">(</span><span class="nx">Jack</span><span class="p">){</span> <span class="k">echo</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Hi</span><span class="p">,</span> <span class="nx">Jack</span><span class="o">!&amp;</span><span class="nx">rdquo</span><span class="p">;;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">Jack</span><span class="o">.</span><span class="na">is_admin</span><span class="o">()){</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">Hi</span><span class="o">,</span> <span class="n">Jack</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="o">;);</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ruby </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Hi</span><span class="p">,</span> <span class="no">Jack</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="k">if</span> <span class="no">Jack</span><span class="o">.</span><span class="n">admin?</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>　　以上三種方法只有ruby的最一目瞭然，不會看花眼，最接近人的語言習慣。<br/>
　　去除了繁雜的括號、花括號，行文直截了當，寫代碼就像寫文章一樣，甚至連寫註釋的功夫的省去了。<br/>
　　更神奇的<em>admin?</em>這個方法根據ruby的動態特性可以在程序運行的時候才生成，而不需要預先寫好代碼。<br/>
　　以下是我rails項目中的代碼片段：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>實際代碼片段 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="n">method_id</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">arguments</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">method_id</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/^can_.&lt;/em</span><span class="o">&gt;</span><span class="p">\</span><span class="sc">?$</span><span class="o">/</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;something = method_id[4..-2]</span>
</span><span class='line'><span class="sr">if something.blank?</span>
</span><span class='line'><span class="sr">  super(method_id, *arguments, &amp;amp;block)</span>
</span><span class='line'><span class="sr">else</span>
</span><span class='line'><span class="sr">  self.class_eval &amp;lt;&amp;lt;-METHOD, __FILE__, __LINE__ + 1</span>
</span><span class='line'><span class="sr">    def </span><span class="si">#{</span><span class="n">method_id</span><span class="si">}</span><span class="sr"></span>
</span><span class='line'><span class="sr">      self.can_do?(:sub_action =&amp;gt; %{</span><span class="si">#{</span><span class="n">something</span><span class="si">}</span><span class="sr">})</span>
</span><span class='line'><span class="sr">    end</span>
</span><span class='line'><span class="sr">  METHOD</span>
</span><span class='line'><span class="sr">  send(method_id, *arguments)</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  elsif method_id.match(/</span><span class="o">^</span><span class="n">dpmt_</span><span class="o">.</span><span class="n">*</span><span class="p">\</span><span class="sc">?$</span><span class="o">/</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt; (略)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end&lt;br/</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>　　下面解釋一下我的思路：</p>

<ul>
<li>約定查找用戶的權限的方法名為<em>can_do?</em>。假設想確認Jack有沒有游泳的權限，則如下那麼寫：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Jack</span><span class="o">.</span><span class="n">can_swim?</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></li>
<li>Jack發現他本身並沒有<em>can_swim?</em>方法，在一系列的處理後他最終調用用了method_missing方法。</li>
<li>method_missing簡單來說只做一件事，判斷Jack是否有swim的權限。</li>
<li>如果想看看Jack有沒有跑步的權限，則直接使用<em>can_run</em>方法，重複以上三個步驟即可。</li>
</ul>


<p>　　對比java，如果需要判斷swin、run、jump三個動作，我們怎麼做？</p>

<ul>
<li>寫三個<em>can_xx</em>方法。<strong>(代碼重複，擴展性差)</strong></li>
<li>寫一個<em>can(xx)</em>方法，每次都把動作當作參數傳進去。<strong>(純主觀看法，括號很難看，不美觀)</strong><br/>
　</li>
</ul>


<p>　　ruby的<em>can_do?</em>是不是很簡單易懂？特別方法尾部畫龍點睛的"?&ldquo;，比java的<em>is_xx()</em>簡直好看百倍！</p>
]]></content>
  </entry>
  
</feed>
