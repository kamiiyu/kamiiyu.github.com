<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | 文斯雜談凸^-^凸]]></title>
  <link href="http://kamiiyu.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://kamiiyu.github.io/"/>
  <updated>2013-12-16T19:15:25+08:00</updated>
  <id>http://kamiiyu.github.io/</id>
  <author>
    <name><![CDATA[文斯]]></name>
    <email><![CDATA[spicekamiiyu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jack是不是管理員？]]></title>
    <link href="http://kamiiyu.github.io/blog/2013/01/29/mrw-admin/"/>
    <updated>2013-01-29T15:29:00+08:00</updated>
    <id>http://kamiiyu.github.io/blog/2013/01/29/mrw-admin</id>
    <content type="html"><![CDATA[<p>　　要問Jack是不是管理員，代碼一般有三種寫法。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">if</span> <span class="nx">is_admin</span><span class="p">(</span><span class="nx">Jack</span><span class="p">){</span> <span class="k">echo</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Hi</span><span class="p">,</span> <span class="nx">Jack</span><span class="o">!&amp;</span><span class="nx">rdquo</span><span class="p">;;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">Jack</span><span class="o">.</span><span class="na">is_admin</span><span class="o">()){</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">Hi</span><span class="o">,</span> <span class="n">Jack</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="o">;);</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ruby </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Hi</span><span class="p">,</span> <span class="no">Jack</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="k">if</span> <span class="no">Jack</span><span class="o">.</span><span class="n">admin?</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>　　以上三種方法只有ruby的最一目瞭然，不會看花眼，最接近人的語言習慣。<br/>
　　去除了繁雜的括號、花括號，行文直截了當，寫代碼就像寫文章一樣，甚至連寫註釋的功夫的省去了。<br/>
　　更神奇的<em>admin?</em>這個方法根據ruby的動態特性可以在程序運行的時候才生成，而不需要預先寫好代碼。<br/>
　　以下是我rails項目中的代碼片段：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>實際代碼片段 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="n">method_id</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">arguments</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">method_id</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/^can_.&lt;/em</span><span class="o">&gt;</span><span class="p">\</span><span class="sc">?$</span><span class="o">/</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;something = method_id[4..-2]</span>
</span><span class='line'><span class="sr">if something.blank?</span>
</span><span class='line'><span class="sr">  super(method_id, *arguments, &amp;amp;block)</span>
</span><span class='line'><span class="sr">else</span>
</span><span class='line'><span class="sr">  self.class_eval &amp;lt;&amp;lt;-METHOD, __FILE__, __LINE__ + 1</span>
</span><span class='line'><span class="sr">    def </span><span class="si">#{</span><span class="n">method_id</span><span class="si">}</span><span class="sr"></span>
</span><span class='line'><span class="sr">      self.can_do?(:sub_action =&amp;gt; %{</span><span class="si">#{</span><span class="n">something</span><span class="si">}</span><span class="sr">})</span>
</span><span class='line'><span class="sr">    end</span>
</span><span class='line'><span class="sr">  METHOD</span>
</span><span class='line'><span class="sr">  send(method_id, *arguments)</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  elsif method_id.match(/</span><span class="o">^</span><span class="n">dpmt_</span><span class="o">.</span><span class="n">*</span><span class="p">\</span><span class="sc">?$</span><span class="o">/</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt; (略)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end&lt;br/</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>　　下面解釋一下我的思路：</p>

<ul>
<li>約定查找用戶的權限的方法名為<em>can_do?</em>。假設想確認Jack有沒有游泳的權限，則如下那麼寫：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Jack</span><span class="o">.</span><span class="n">can_swim?</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></li>
<li>Jack發現他本身並沒有<em>can_swim?</em>方法，在一系列的處理後他最終調用用了method_missing方法。</li>
<li>method_missing簡單來說只做一件事，判斷Jack是否有swim的權限。</li>
<li>如果想看看Jack有沒有跑步的權限，則直接使用<em>can_run</em>方法，重複以上三個步驟即可。</li>
</ul>


<p>　　對比java，如果需要判斷swin、run、jump三個動作，我們怎麼做？</p>

<ul>
<li>寫三個<em>can_xx</em>方法。<strong>(代碼重複，擴展性差)</strong></li>
<li>寫一個<em>can(xx)</em>方法，每次都把動作當作參數傳進去。<strong>(純主觀看法，括號很難看，不美觀)</strong><br/>
　</li>
</ul>


<p>　　ruby的<em>can_do?</em>是不是很簡單易懂？特別方法尾部畫龍點睛的"?&ldquo;，比java的<em>is_xx()</em>簡直好看百倍！</p>
]]></content>
  </entry>
  
</feed>
